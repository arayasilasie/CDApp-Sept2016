//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ECX.CD.BE {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MCP")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MCP : global::System.Data.DataSet {
        
        private MCPDataTable tableMCP;
        
        private MCPBankAccountDataTable tableMCPBankAccount;
        
        private MCPWarehouseReceiptDataTable tableMCPWarehouseReceipt;
        
        private MembersListDataTable tableMembersList;
        
        private global::System.Data.DataRelation relationMCP_MCPWarehouseReceipt;
        
        private global::System.Data.DataRelation relationMCP_MCPBankAccount;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MCP() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MCP(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["MCP"] != null)) {
                    base.Tables.Add(new MCPDataTable(ds.Tables["MCP"]));
                }
                if ((ds.Tables["MCPBankAccount"] != null)) {
                    base.Tables.Add(new MCPBankAccountDataTable(ds.Tables["MCPBankAccount"]));
                }
                if ((ds.Tables["MCPWarehouseReceipt"] != null)) {
                    base.Tables.Add(new MCPWarehouseReceiptDataTable(ds.Tables["MCPWarehouseReceipt"]));
                }
                if ((ds.Tables["MembersList"] != null)) {
                    base.Tables.Add(new MembersListDataTable(ds.Tables["MembersList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MCPDataTable _MCP {
            get {
                return this.tableMCP;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MCPBankAccountDataTable MCPBankAccount {
            get {
                return this.tableMCPBankAccount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MCPWarehouseReceiptDataTable MCPWarehouseReceipt {
            get {
                return this.tableMCPWarehouseReceipt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MembersListDataTable MembersList {
            get {
                return this.tableMembersList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MCP cln = ((MCP)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MCP"] != null)) {
                    base.Tables.Add(new MCPDataTable(ds.Tables["MCP"]));
                }
                if ((ds.Tables["MCPBankAccount"] != null)) {
                    base.Tables.Add(new MCPBankAccountDataTable(ds.Tables["MCPBankAccount"]));
                }
                if ((ds.Tables["MCPWarehouseReceipt"] != null)) {
                    base.Tables.Add(new MCPWarehouseReceiptDataTable(ds.Tables["MCPWarehouseReceipt"]));
                }
                if ((ds.Tables["MembersList"] != null)) {
                    base.Tables.Add(new MembersListDataTable(ds.Tables["MembersList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMCP = ((MCPDataTable)(base.Tables["MCP"]));
            if ((initTable == true)) {
                if ((this.tableMCP != null)) {
                    this.tableMCP.InitVars();
                }
            }
            this.tableMCPBankAccount = ((MCPBankAccountDataTable)(base.Tables["MCPBankAccount"]));
            if ((initTable == true)) {
                if ((this.tableMCPBankAccount != null)) {
                    this.tableMCPBankAccount.InitVars();
                }
            }
            this.tableMCPWarehouseReceipt = ((MCPWarehouseReceiptDataTable)(base.Tables["MCPWarehouseReceipt"]));
            if ((initTable == true)) {
                if ((this.tableMCPWarehouseReceipt != null)) {
                    this.tableMCPWarehouseReceipt.InitVars();
                }
            }
            this.tableMembersList = ((MembersListDataTable)(base.Tables["MembersList"]));
            if ((initTable == true)) {
                if ((this.tableMembersList != null)) {
                    this.tableMembersList.InitVars();
                }
            }
            this.relationMCP_MCPWarehouseReceipt = this.Relations["MCP_MCPWarehouseReceipt"];
            this.relationMCP_MCPBankAccount = this.Relations["MCP_MCPBankAccount"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MCP";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MCP.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMCP = new MCPDataTable();
            base.Tables.Add(this.tableMCP);
            this.tableMCPBankAccount = new MCPBankAccountDataTable();
            base.Tables.Add(this.tableMCPBankAccount);
            this.tableMCPWarehouseReceipt = new MCPWarehouseReceiptDataTable();
            base.Tables.Add(this.tableMCPWarehouseReceipt);
            this.tableMembersList = new MembersListDataTable();
            base.Tables.Add(this.tableMembersList);
            this.relationMCP_MCPWarehouseReceipt = new global::System.Data.DataRelation("MCP_MCPWarehouseReceipt", new global::System.Data.DataColumn[] {
                        this.tableMCP.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMCPWarehouseReceipt.MCPIdColumn}, false);
            this.Relations.Add(this.relationMCP_MCPWarehouseReceipt);
            this.relationMCP_MCPBankAccount = new global::System.Data.DataRelation("MCP_MCPBankAccount", new global::System.Data.DataColumn[] {
                        this.tableMCP.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMCPBankAccount.MCPIdColumn}, false);
            this.Relations.Add(this.relationMCP_MCPBankAccount);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_MCP() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMCPBankAccount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMCPWarehouseReceipt() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMembersList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MCP ds = new MCP();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void MCPRowChangeEventHandler(object sender, MCPRowChangeEvent e);
        
        public delegate void MCPBankAccountRowChangeEventHandler(object sender, MCPBankAccountRowChangeEvent e);
        
        public delegate void MCPWarehouseReceiptRowChangeEventHandler(object sender, MCPWarehouseReceiptRowChangeEvent e);
        
        public delegate void MembersListRowChangeEventHandler(object sender, MembersListRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MCPDataTable : global::System.Data.TypedTableBase<MCPRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnGeneratedTimestamp;
            
            private global::System.Data.DataColumn columnMembersCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPDataTable() {
                this.TableName = "MCP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MCPDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MCPDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GeneratedTimestampColumn {
                get {
                    return this.columnGeneratedTimestamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MembersCountColumn {
                get {
                    return this.columnMembersCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPRow this[int index] {
                get {
                    return ((MCPRow)(this.Rows[index]));
                }
            }
            
            public event MCPRowChangeEventHandler MCPRowChanging;
            
            public event MCPRowChangeEventHandler MCPRowChanged;
            
            public event MCPRowChangeEventHandler MCPRowDeleting;
            
            public event MCPRowChangeEventHandler MCPRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMCPRow(MCPRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPRow AddMCPRow(System.Guid Id, System.DateTime GeneratedTimestamp, int MembersCount) {
                MCPRow rowMCPRow = ((MCPRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        GeneratedTimestamp,
                        MembersCount};
                rowMCPRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMCPRow);
                return rowMCPRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPRow FindById(System.Guid Id) {
                return ((MCPRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MCPDataTable cln = ((MCPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MCPDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnGeneratedTimestamp = base.Columns["GeneratedTimestamp"];
                this.columnMembersCount = base.Columns["MembersCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnGeneratedTimestamp = new global::System.Data.DataColumn("GeneratedTimestamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGeneratedTimestamp);
                this.columnMembersCount = new global::System.Data.DataColumn("MembersCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMembersCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnGeneratedTimestamp.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_TablePropName", "_MCP");
                this.ExtendedProperties.Add("Generator_UserTableName", "MCP");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPRow NewMCPRow() {
                return ((MCPRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MCPRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MCPRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MCPRowChanged != null)) {
                    this.MCPRowChanged(this, new MCPRowChangeEvent(((MCPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MCPRowChanging != null)) {
                    this.MCPRowChanging(this, new MCPRowChangeEvent(((MCPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MCPRowDeleted != null)) {
                    this.MCPRowDeleted(this, new MCPRowChangeEvent(((MCPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MCPRowDeleting != null)) {
                    this.MCPRowDeleting(this, new MCPRowChangeEvent(((MCPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMCPRow(MCPRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MCP ds = new MCP();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MCPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MCPBankAccountDataTable : global::System.Data.TypedTableBase<MCPBankAccountRow> {
            
            private global::System.Data.DataColumn columnMCPId;
            
            private global::System.Data.DataColumn columnMemberGuid;
            
            private global::System.Data.DataColumn columnAccountType;
            
            private global::System.Data.DataColumn columnBalance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPBankAccountDataTable() {
                this.TableName = "MCPBankAccount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MCPBankAccountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MCPBankAccountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MCPIdColumn {
                get {
                    return this.columnMCPId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberGuidColumn {
                get {
                    return this.columnMemberGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountTypeColumn {
                get {
                    return this.columnAccountType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceColumn {
                get {
                    return this.columnBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPBankAccountRow this[int index] {
                get {
                    return ((MCPBankAccountRow)(this.Rows[index]));
                }
            }
            
            public event MCPBankAccountRowChangeEventHandler MCPBankAccountRowChanging;
            
            public event MCPBankAccountRowChangeEventHandler MCPBankAccountRowChanged;
            
            public event MCPBankAccountRowChangeEventHandler MCPBankAccountRowDeleting;
            
            public event MCPBankAccountRowChangeEventHandler MCPBankAccountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMCPBankAccountRow(MCPBankAccountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPBankAccountRow AddMCPBankAccountRow(MCPRow parentMCPRowByMCP_MCPBankAccount, System.Guid MemberGuid, string AccountType, double Balance) {
                MCPBankAccountRow rowMCPBankAccountRow = ((MCPBankAccountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MemberGuid,
                        AccountType,
                        Balance};
                if ((parentMCPRowByMCP_MCPBankAccount != null)) {
                    columnValuesArray[0] = parentMCPRowByMCP_MCPBankAccount[0];
                }
                rowMCPBankAccountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMCPBankAccountRow);
                return rowMCPBankAccountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MCPBankAccountDataTable cln = ((MCPBankAccountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MCPBankAccountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMCPId = base.Columns["MCPId"];
                this.columnMemberGuid = base.Columns["MemberGuid"];
                this.columnAccountType = base.Columns["AccountType"];
                this.columnBalance = base.Columns["Balance"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMCPId = new global::System.Data.DataColumn("MCPId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCPId);
                this.columnMemberGuid = new global::System.Data.DataColumn("MemberGuid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberGuid);
                this.columnAccountType = new global::System.Data.DataColumn("AccountType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountType);
                this.columnBalance = new global::System.Data.DataColumn("Balance", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalance);
                this.columnMCPId.AllowDBNull = false;
                this.columnMemberGuid.AllowDBNull = false;
                this.columnAccountType.AllowDBNull = false;
                this.columnAccountType.MaxLength = 50;
                this.columnBalance.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPBankAccountRow NewMCPBankAccountRow() {
                return ((MCPBankAccountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MCPBankAccountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MCPBankAccountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MCPBankAccountRowChanged != null)) {
                    this.MCPBankAccountRowChanged(this, new MCPBankAccountRowChangeEvent(((MCPBankAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MCPBankAccountRowChanging != null)) {
                    this.MCPBankAccountRowChanging(this, new MCPBankAccountRowChangeEvent(((MCPBankAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MCPBankAccountRowDeleted != null)) {
                    this.MCPBankAccountRowDeleted(this, new MCPBankAccountRowChangeEvent(((MCPBankAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MCPBankAccountRowDeleting != null)) {
                    this.MCPBankAccountRowDeleting(this, new MCPBankAccountRowChangeEvent(((MCPBankAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMCPBankAccountRow(MCPBankAccountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MCP ds = new MCP();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MCPBankAccountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MCPWarehouseReceiptDataTable : global::System.Data.TypedTableBase<MCPWarehouseReceiptRow> {
            
            private global::System.Data.DataColumn columnMCPId;
            
            private global::System.Data.DataColumn columnMemberGuid;
            
            private global::System.Data.DataColumn columnMemberId;
            
            private global::System.Data.DataColumn columnMemberName;
            
            private global::System.Data.DataColumn columnClientId;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnIsMember;
            
            private global::System.Data.DataColumn columnWHR;
            
            private global::System.Data.DataColumn columnCommodityGrade;
            
            private global::System.Data.DataColumn columnCommodityGradeGuid;
            
            private global::System.Data.DataColumn columnWarehouse;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnExpiryDate;
            
            private global::System.Data.DataColumn columnDaysRemaining;
            
            private global::System.Data.DataColumn columnIsTradable;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnProductionYear;
            
            private global::System.Data.DataColumn columnWHRFStatus;
            
            private global::System.Data.DataColumn columnGRNNumber;
            
            private global::System.Data.DataColumn columnGeneratedTimestamp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPWarehouseReceiptDataTable() {
                this.TableName = "MCPWarehouseReceipt";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MCPWarehouseReceiptDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MCPWarehouseReceiptDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MCPIdColumn {
                get {
                    return this.columnMCPId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberGuidColumn {
                get {
                    return this.columnMemberGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberIdColumn {
                get {
                    return this.columnMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberNameColumn {
                get {
                    return this.columnMemberName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIdColumn {
                get {
                    return this.columnClientId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsMemberColumn {
                get {
                    return this.columnIsMember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHRColumn {
                get {
                    return this.columnWHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommodityGradeColumn {
                get {
                    return this.columnCommodityGrade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommodityGradeGuidColumn {
                get {
                    return this.columnCommodityGradeGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseColumn {
                get {
                    return this.columnWarehouse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpiryDateColumn {
                get {
                    return this.columnExpiryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DaysRemainingColumn {
                get {
                    return this.columnDaysRemaining;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTradableColumn {
                get {
                    return this.columnIsTradable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProductionYearColumn {
                get {
                    return this.columnProductionYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHRFStatusColumn {
                get {
                    return this.columnWHRFStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRNNumberColumn {
                get {
                    return this.columnGRNNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GeneratedTimestampColumn {
                get {
                    return this.columnGeneratedTimestamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPWarehouseReceiptRow this[int index] {
                get {
                    return ((MCPWarehouseReceiptRow)(this.Rows[index]));
                }
            }
            
            public event MCPWarehouseReceiptRowChangeEventHandler MCPWarehouseReceiptRowChanging;
            
            public event MCPWarehouseReceiptRowChangeEventHandler MCPWarehouseReceiptRowChanged;
            
            public event MCPWarehouseReceiptRowChangeEventHandler MCPWarehouseReceiptRowDeleting;
            
            public event MCPWarehouseReceiptRowChangeEventHandler MCPWarehouseReceiptRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMCPWarehouseReceiptRow(MCPWarehouseReceiptRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPWarehouseReceiptRow AddMCPWarehouseReceiptRow(
                        MCPRow parentMCPRowByMCP_MCPWarehouseReceipt, 
                        System.Guid MemberGuid, 
                        string MemberId, 
                        string MemberName, 
                        string ClientId, 
                        string ClientName, 
                        bool IsMember, 
                        int WHR, 
                        string CommodityGrade, 
                        System.Guid CommodityGradeGuid, 
                        string Warehouse, 
                        double Quantity, 
                        System.DateTime ExpiryDate, 
                        int DaysRemaining, 
                        bool IsTradable, 
                        string Status, 
                        int ProductionYear, 
                        string WHRFStatus, 
                        string GRNNumber, 
                        System.DateTime GeneratedTimestamp) {
                MCPWarehouseReceiptRow rowMCPWarehouseReceiptRow = ((MCPWarehouseReceiptRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MemberGuid,
                        MemberId,
                        MemberName,
                        ClientId,
                        ClientName,
                        IsMember,
                        WHR,
                        CommodityGrade,
                        CommodityGradeGuid,
                        Warehouse,
                        Quantity,
                        ExpiryDate,
                        DaysRemaining,
                        IsTradable,
                        Status,
                        ProductionYear,
                        WHRFStatus,
                        GRNNumber,
                        GeneratedTimestamp};
                if ((parentMCPRowByMCP_MCPWarehouseReceipt != null)) {
                    columnValuesArray[0] = parentMCPRowByMCP_MCPWarehouseReceipt[0];
                }
                rowMCPWarehouseReceiptRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMCPWarehouseReceiptRow);
                return rowMCPWarehouseReceiptRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MCPWarehouseReceiptDataTable cln = ((MCPWarehouseReceiptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MCPWarehouseReceiptDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMCPId = base.Columns["MCPId"];
                this.columnMemberGuid = base.Columns["MemberGuid"];
                this.columnMemberId = base.Columns["MemberId"];
                this.columnMemberName = base.Columns["MemberName"];
                this.columnClientId = base.Columns["ClientId"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnIsMember = base.Columns["IsMember"];
                this.columnWHR = base.Columns["WHR"];
                this.columnCommodityGrade = base.Columns["CommodityGrade"];
                this.columnCommodityGradeGuid = base.Columns["CommodityGradeGuid"];
                this.columnWarehouse = base.Columns["Warehouse"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnExpiryDate = base.Columns["ExpiryDate"];
                this.columnDaysRemaining = base.Columns["DaysRemaining"];
                this.columnIsTradable = base.Columns["IsTradable"];
                this.columnStatus = base.Columns["Status"];
                this.columnProductionYear = base.Columns["ProductionYear"];
                this.columnWHRFStatus = base.Columns["WHRFStatus"];
                this.columnGRNNumber = base.Columns["GRNNumber"];
                this.columnGeneratedTimestamp = base.Columns["GeneratedTimestamp"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMCPId = new global::System.Data.DataColumn("MCPId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCPId);
                this.columnMemberGuid = new global::System.Data.DataColumn("MemberGuid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberGuid);
                this.columnMemberId = new global::System.Data.DataColumn("MemberId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberId);
                this.columnMemberName = new global::System.Data.DataColumn("MemberName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberName);
                this.columnClientId = new global::System.Data.DataColumn("ClientId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientId);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnIsMember = new global::System.Data.DataColumn("IsMember", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMember);
                this.columnWHR = new global::System.Data.DataColumn("WHR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHR);
                this.columnCommodityGrade = new global::System.Data.DataColumn("CommodityGrade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommodityGrade);
                this.columnCommodityGradeGuid = new global::System.Data.DataColumn("CommodityGradeGuid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommodityGradeGuid);
                this.columnWarehouse = new global::System.Data.DataColumn("Warehouse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouse);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnExpiryDate = new global::System.Data.DataColumn("ExpiryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpiryDate);
                this.columnDaysRemaining = new global::System.Data.DataColumn("DaysRemaining", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDaysRemaining);
                this.columnIsTradable = new global::System.Data.DataColumn("IsTradable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTradable);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnProductionYear = new global::System.Data.DataColumn("ProductionYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductionYear);
                this.columnWHRFStatus = new global::System.Data.DataColumn("WHRFStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHRFStatus);
                this.columnGRNNumber = new global::System.Data.DataColumn("GRNNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRNNumber);
                this.columnGeneratedTimestamp = new global::System.Data.DataColumn("GeneratedTimestamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGeneratedTimestamp);
                this.columnMCPId.AllowDBNull = false;
                this.columnMemberId.MaxLength = 20;
                this.columnMemberName.MaxLength = 100;
                this.columnClientId.MaxLength = 20;
                this.columnClientName.MaxLength = 100;
                this.columnCommodityGrade.MaxLength = 100;
                this.columnWarehouse.MaxLength = 100;
                this.columnStatus.MaxLength = 20;
                this.columnWHRFStatus.MaxLength = 20;
                this.columnGRNNumber.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPWarehouseReceiptRow NewMCPWarehouseReceiptRow() {
                return ((MCPWarehouseReceiptRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MCPWarehouseReceiptRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MCPWarehouseReceiptRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MCPWarehouseReceiptRowChanged != null)) {
                    this.MCPWarehouseReceiptRowChanged(this, new MCPWarehouseReceiptRowChangeEvent(((MCPWarehouseReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MCPWarehouseReceiptRowChanging != null)) {
                    this.MCPWarehouseReceiptRowChanging(this, new MCPWarehouseReceiptRowChangeEvent(((MCPWarehouseReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MCPWarehouseReceiptRowDeleted != null)) {
                    this.MCPWarehouseReceiptRowDeleted(this, new MCPWarehouseReceiptRowChangeEvent(((MCPWarehouseReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MCPWarehouseReceiptRowDeleting != null)) {
                    this.MCPWarehouseReceiptRowDeleting(this, new MCPWarehouseReceiptRowChangeEvent(((MCPWarehouseReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMCPWarehouseReceiptRow(MCPWarehouseReceiptRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MCP ds = new MCP();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MCPWarehouseReceiptDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MembersListDataTable : global::System.Data.TypedTableBase<MembersListRow> {
            
            private global::System.Data.DataColumn columnMemberGuid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersListDataTable() {
                this.TableName = "MembersList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MembersListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MembersListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberGuidColumn {
                get {
                    return this.columnMemberGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersListRow this[int index] {
                get {
                    return ((MembersListRow)(this.Rows[index]));
                }
            }
            
            public event MembersListRowChangeEventHandler MembersListRowChanging;
            
            public event MembersListRowChangeEventHandler MembersListRowChanged;
            
            public event MembersListRowChangeEventHandler MembersListRowDeleting;
            
            public event MembersListRowChangeEventHandler MembersListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMembersListRow(MembersListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersListRow AddMembersListRow(System.Guid MemberGuid) {
                MembersListRow rowMembersListRow = ((MembersListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MemberGuid};
                rowMembersListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMembersListRow);
                return rowMembersListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MembersListDataTable cln = ((MembersListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MembersListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemberGuid = base.Columns["MemberGuid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemberGuid = new global::System.Data.DataColumn("MemberGuid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberGuid);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersListRow NewMembersListRow() {
                return ((MembersListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MembersListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MembersListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MembersListRowChanged != null)) {
                    this.MembersListRowChanged(this, new MembersListRowChangeEvent(((MembersListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MembersListRowChanging != null)) {
                    this.MembersListRowChanging(this, new MembersListRowChangeEvent(((MembersListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MembersListRowDeleted != null)) {
                    this.MembersListRowDeleted(this, new MembersListRowChangeEvent(((MembersListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MembersListRowDeleting != null)) {
                    this.MembersListRowDeleting(this, new MembersListRowChangeEvent(((MembersListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMembersListRow(MembersListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MCP ds = new MCP();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MembersListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MCPRow : global::System.Data.DataRow {
            
            private MCPDataTable tableMCP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MCPRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMCP = ((MCPDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid Id {
                get {
                    return ((global::System.Guid)(this[this.tableMCP.IdColumn]));
                }
                set {
                    this[this.tableMCP.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime GeneratedTimestamp {
                get {
                    return ((global::System.DateTime)(this[this.tableMCP.GeneratedTimestampColumn]));
                }
                set {
                    this[this.tableMCP.GeneratedTimestampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MembersCount {
                get {
                    try {
                        return ((int)(this[this.tableMCP.MembersCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MembersCount\' in table \'MCP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCP.MembersCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMembersCountNull() {
                return this.IsNull(this.tableMCP.MembersCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMembersCountNull() {
                this[this.tableMCP.MembersCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPWarehouseReceiptRow[] GetMCPWarehouseReceiptRows() {
                if ((this.Table.ChildRelations["MCP_MCPWarehouseReceipt"] == null)) {
                    return new MCPWarehouseReceiptRow[0];
                }
                else {
                    return ((MCPWarehouseReceiptRow[])(base.GetChildRows(this.Table.ChildRelations["MCP_MCPWarehouseReceipt"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPBankAccountRow[] GetMCPBankAccountRows() {
                if ((this.Table.ChildRelations["MCP_MCPBankAccount"] == null)) {
                    return new MCPBankAccountRow[0];
                }
                else {
                    return ((MCPBankAccountRow[])(base.GetChildRows(this.Table.ChildRelations["MCP_MCPBankAccount"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MCPBankAccountRow : global::System.Data.DataRow {
            
            private MCPBankAccountDataTable tableMCPBankAccount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MCPBankAccountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMCPBankAccount = ((MCPBankAccountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid MCPId {
                get {
                    return ((global::System.Guid)(this[this.tableMCPBankAccount.MCPIdColumn]));
                }
                set {
                    this[this.tableMCPBankAccount.MCPIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid MemberGuid {
                get {
                    return ((global::System.Guid)(this[this.tableMCPBankAccount.MemberGuidColumn]));
                }
                set {
                    this[this.tableMCPBankAccount.MemberGuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountType {
                get {
                    return ((string)(this[this.tableMCPBankAccount.AccountTypeColumn]));
                }
                set {
                    this[this.tableMCPBankAccount.AccountTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Balance {
                get {
                    return ((double)(this[this.tableMCPBankAccount.BalanceColumn]));
                }
                set {
                    this[this.tableMCPBankAccount.BalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPRow MCPRow {
                get {
                    return ((MCPRow)(this.GetParentRow(this.Table.ParentRelations["MCP_MCPBankAccount"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MCP_MCPBankAccount"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MCPWarehouseReceiptRow : global::System.Data.DataRow {
            
            private MCPWarehouseReceiptDataTable tableMCPWarehouseReceipt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MCPWarehouseReceiptRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMCPWarehouseReceipt = ((MCPWarehouseReceiptDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid MCPId {
                get {
                    return ((global::System.Guid)(this[this.tableMCPWarehouseReceipt.MCPIdColumn]));
                }
                set {
                    this[this.tableMCPWarehouseReceipt.MCPIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid MemberGuid {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableMCPWarehouseReceipt.MemberGuidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberGuid\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.MemberGuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MemberId {
                get {
                    try {
                        return ((string)(this[this.tableMCPWarehouseReceipt.MemberIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberId\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.MemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MemberName {
                get {
                    try {
                        return ((string)(this[this.tableMCPWarehouseReceipt.MemberNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberName\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.MemberNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientId {
                get {
                    try {
                        return ((string)(this[this.tableMCPWarehouseReceipt.ClientIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientId\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.ClientIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableMCPWarehouseReceipt.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMember {
                get {
                    try {
                        return ((bool)(this[this.tableMCPWarehouseReceipt.IsMemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsMember\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.IsMemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WHR {
                get {
                    try {
                        return ((int)(this[this.tableMCPWarehouseReceipt.WHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WHR\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.WHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CommodityGrade {
                get {
                    try {
                        return ((string)(this[this.tableMCPWarehouseReceipt.CommodityGradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommodityGrade\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.CommodityGradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid CommodityGradeGuid {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableMCPWarehouseReceipt.CommodityGradeGuidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommodityGradeGuid\' in table \'MCPWarehouseReceipt\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.CommodityGradeGuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Warehouse {
                get {
                    try {
                        return ((string)(this[this.tableMCPWarehouseReceipt.WarehouseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Warehouse\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.WarehouseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    try {
                        return ((double)(this[this.tableMCPWarehouseReceipt.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ExpiryDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMCPWarehouseReceipt.ExpiryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpiryDate\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.ExpiryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DaysRemaining {
                get {
                    try {
                        return ((int)(this[this.tableMCPWarehouseReceipt.DaysRemainingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DaysRemaining\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.DaysRemainingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTradable {
                get {
                    try {
                        return ((bool)(this[this.tableMCPWarehouseReceipt.IsTradableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTradable\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.IsTradableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableMCPWarehouseReceipt.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionYear {
                get {
                    try {
                        return ((int)(this[this.tableMCPWarehouseReceipt.ProductionYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductionYear\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.ProductionYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHRFStatus {
                get {
                    try {
                        return ((string)(this[this.tableMCPWarehouseReceipt.WHRFStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WHRFStatus\' in table \'MCPWarehouseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.WHRFStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GRNNumber {
                get {
                    if (this.IsGRNNumberNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableMCPWarehouseReceipt.GRNNumberColumn]));
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.GRNNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime GeneratedTimestamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMCPWarehouseReceipt.GeneratedTimestampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GeneratedTimestamp\' in table \'MCPWarehouseReceipt\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMCPWarehouseReceipt.GeneratedTimestampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPRow MCPRow {
                get {
                    return ((MCPRow)(this.GetParentRow(this.Table.ParentRelations["MCP_MCPWarehouseReceipt"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MCP_MCPWarehouseReceipt"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberGuidNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.MemberGuidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberGuidNull() {
                this[this.tableMCPWarehouseReceipt.MemberGuidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberIdNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.MemberIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberIdNull() {
                this[this.tableMCPWarehouseReceipt.MemberIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberNameNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.MemberNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberNameNull() {
                this[this.tableMCPWarehouseReceipt.MemberNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIdNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.ClientIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIdNull() {
                this[this.tableMCPWarehouseReceipt.ClientIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableMCPWarehouseReceipt.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsMemberNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.IsMemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsMemberNull() {
                this[this.tableMCPWarehouseReceipt.IsMemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHRNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.WHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHRNull() {
                this[this.tableMCPWarehouseReceipt.WHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommodityGradeNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.CommodityGradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommodityGradeNull() {
                this[this.tableMCPWarehouseReceipt.CommodityGradeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommodityGradeGuidNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.CommodityGradeGuidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommodityGradeGuidNull() {
                this[this.tableMCPWarehouseReceipt.CommodityGradeGuidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.WarehouseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNull() {
                this[this.tableMCPWarehouseReceipt.WarehouseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tableMCPWarehouseReceipt.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpiryDateNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.ExpiryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpiryDateNull() {
                this[this.tableMCPWarehouseReceipt.ExpiryDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDaysRemainingNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.DaysRemainingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDaysRemainingNull() {
                this[this.tableMCPWarehouseReceipt.DaysRemainingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsTradableNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.IsTradableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsTradableNull() {
                this[this.tableMCPWarehouseReceipt.IsTradableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableMCPWarehouseReceipt.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionYearNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.ProductionYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionYearNull() {
                this[this.tableMCPWarehouseReceipt.ProductionYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHRFStatusNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.WHRFStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHRFStatusNull() {
                this[this.tableMCPWarehouseReceipt.WHRFStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGRNNumberNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.GRNNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGRNNumberNull() {
                this[this.tableMCPWarehouseReceipt.GRNNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGeneratedTimestampNull() {
                return this.IsNull(this.tableMCPWarehouseReceipt.GeneratedTimestampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGeneratedTimestampNull() {
                this[this.tableMCPWarehouseReceipt.GeneratedTimestampColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MembersListRow : global::System.Data.DataRow {
            
            private MembersListDataTable tableMembersList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MembersListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMembersList = ((MembersListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid MemberGuid {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableMembersList.MemberGuidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberGuid\' in table \'MembersList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembersList.MemberGuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberGuidNull() {
                return this.IsNull(this.tableMembersList.MemberGuidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberGuidNull() {
                this[this.tableMembersList.MemberGuidColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MCPRowChangeEvent : global::System.EventArgs {
            
            private MCPRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPRowChangeEvent(MCPRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MCPBankAccountRowChangeEvent : global::System.EventArgs {
            
            private MCPBankAccountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPBankAccountRowChangeEvent(MCPBankAccountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPBankAccountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MCPWarehouseReceiptRowChangeEvent : global::System.EventArgs {
            
            private MCPWarehouseReceiptRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPWarehouseReceiptRowChangeEvent(MCPWarehouseReceiptRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MCPWarehouseReceiptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MembersListRowChangeEvent : global::System.EventArgs {
            
            private MembersListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersListRowChangeEvent(MembersListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591