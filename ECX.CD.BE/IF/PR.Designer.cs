//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ECX.CD.BE.IF {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PR")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PR : global::System.Data.DataSet {
        
        private PledgeRequestDataTable tablePledgeRequest;
        
        private RejectionReasonsDataTable tableRejectionReasons;
        
        private PledgeRequestRejectedDataTable tablePledgeRequestRejected;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PR() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PR(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PledgeRequest"] != null)) {
                    base.Tables.Add(new PledgeRequestDataTable(ds.Tables["PledgeRequest"]));
                }
                if ((ds.Tables["RejectionReasons"] != null)) {
                    base.Tables.Add(new RejectionReasonsDataTable(ds.Tables["RejectionReasons"]));
                }
                if ((ds.Tables["PledgeRequestRejected"] != null)) {
                    base.Tables.Add(new PledgeRequestRejectedDataTable(ds.Tables["PledgeRequestRejected"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PledgeRequestDataTable PledgeRequest {
            get {
                return this.tablePledgeRequest;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RejectionReasonsDataTable RejectionReasons {
            get {
                return this.tableRejectionReasons;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PledgeRequestRejectedDataTable PledgeRequestRejected {
            get {
                return this.tablePledgeRequestRejected;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PR cln = ((PR)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PledgeRequest"] != null)) {
                    base.Tables.Add(new PledgeRequestDataTable(ds.Tables["PledgeRequest"]));
                }
                if ((ds.Tables["RejectionReasons"] != null)) {
                    base.Tables.Add(new RejectionReasonsDataTable(ds.Tables["RejectionReasons"]));
                }
                if ((ds.Tables["PledgeRequestRejected"] != null)) {
                    base.Tables.Add(new PledgeRequestRejectedDataTable(ds.Tables["PledgeRequestRejected"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePledgeRequest = ((PledgeRequestDataTable)(base.Tables["PledgeRequest"]));
            if ((initTable == true)) {
                if ((this.tablePledgeRequest != null)) {
                    this.tablePledgeRequest.InitVars();
                }
            }
            this.tableRejectionReasons = ((RejectionReasonsDataTable)(base.Tables["RejectionReasons"]));
            if ((initTable == true)) {
                if ((this.tableRejectionReasons != null)) {
                    this.tableRejectionReasons.InitVars();
                }
            }
            this.tablePledgeRequestRejected = ((PledgeRequestRejectedDataTable)(base.Tables["PledgeRequestRejected"]));
            if ((initTable == true)) {
                if ((this.tablePledgeRequestRejected != null)) {
                    this.tablePledgeRequestRejected.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PR";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PR.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePledgeRequest = new PledgeRequestDataTable();
            base.Tables.Add(this.tablePledgeRequest);
            this.tableRejectionReasons = new RejectionReasonsDataTable();
            base.Tables.Add(this.tableRejectionReasons);
            this.tablePledgeRequestRejected = new PledgeRequestRejectedDataTable();
            base.Tables.Add(this.tablePledgeRequestRejected);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePledgeRequest() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRejectionReasons() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePledgeRequestRejected() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PR ds = new PR();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PledgeRequestRowChangeEventHandler(object sender, PledgeRequestRowChangeEvent e);
        
        public delegate void RejectionReasonsRowChangeEventHandler(object sender, RejectionReasonsRowChangeEvent e);
        
        public delegate void PledgeRequestRejectedRowChangeEventHandler(object sender, PledgeRequestRejectedRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PledgeRequestDataTable : global::System.Data.TypedTableBase<PledgeRequestRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnWRNO;
            
            private global::System.Data.DataColumn columnGRNNO;
            
            private global::System.Data.DataColumn columnMCID;
            
            private global::System.Data.DataColumn columnCommodityGradeId;
            
            private global::System.Data.DataColumn columnBankBranchId;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnExpDate;
            
            private global::System.Data.DataColumn columnNID;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnForClosedDocReceived;
            
            private global::System.Data.DataColumn columnIsMember;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnCreatedDate;
            
            private global::System.Data.DataColumn columnUpdatedBy;
            
            private global::System.Data.DataColumn columnUpdatedDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestDataTable() {
                this.TableName = "PledgeRequest";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PledgeRequestDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PledgeRequestDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WRNOColumn {
                get {
                    return this.columnWRNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRNNOColumn {
                get {
                    return this.columnGRNNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MCIDColumn {
                get {
                    return this.columnMCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommodityGradeIdColumn {
                get {
                    return this.columnCommodityGradeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankBranchIdColumn {
                get {
                    return this.columnBankBranchId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpDateColumn {
                get {
                    return this.columnExpDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NIDColumn {
                get {
                    return this.columnNID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ForClosedDocReceivedColumn {
                get {
                    return this.columnForClosedDocReceived;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsMemberColumn {
                get {
                    return this.columnIsMember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDateColumn {
                get {
                    return this.columnCreatedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedByColumn {
                get {
                    return this.columnUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdatedDateColumn {
                get {
                    return this.columnUpdatedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRow this[int index] {
                get {
                    return ((PledgeRequestRow)(this.Rows[index]));
                }
            }
            
            public event PledgeRequestRowChangeEventHandler PledgeRequestRowChanging;
            
            public event PledgeRequestRowChangeEventHandler PledgeRequestRowChanged;
            
            public event PledgeRequestRowChangeEventHandler PledgeRequestRowDeleting;
            
            public event PledgeRequestRowChangeEventHandler PledgeRequestRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPledgeRequestRow(PledgeRequestRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRow AddPledgeRequestRow(
                        System.Guid Id, 
                        int WRNO, 
                        int GRNNO, 
                        System.Guid MCID, 
                        System.Guid CommodityGradeId, 
                        System.Guid BankBranchId, 
                        int Quantity, 
                        System.DateTime ExpDate, 
                        string NID, 
                        int Status, 
                        bool ForClosedDocReceived, 
                        bool IsMember, 
                        System.Guid CreatedBy, 
                        System.DateTime CreatedDate, 
                        System.Guid UpdatedBy, 
                        System.DateTime UpdatedDate) {
                PledgeRequestRow rowPledgeRequestRow = ((PledgeRequestRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        WRNO,
                        GRNNO,
                        MCID,
                        CommodityGradeId,
                        BankBranchId,
                        Quantity,
                        ExpDate,
                        NID,
                        Status,
                        ForClosedDocReceived,
                        IsMember,
                        CreatedBy,
                        CreatedDate,
                        UpdatedBy,
                        UpdatedDate};
                rowPledgeRequestRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPledgeRequestRow);
                return rowPledgeRequestRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRow FindById(System.Guid Id) {
                return ((PledgeRequestRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PledgeRequestDataTable cln = ((PledgeRequestDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PledgeRequestDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnWRNO = base.Columns["WRNO"];
                this.columnGRNNO = base.Columns["GRNNO"];
                this.columnMCID = base.Columns["MCID"];
                this.columnCommodityGradeId = base.Columns["CommodityGradeId"];
                this.columnBankBranchId = base.Columns["BankBranchId"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnExpDate = base.Columns["ExpDate"];
                this.columnNID = base.Columns["NID"];
                this.columnStatus = base.Columns["Status"];
                this.columnForClosedDocReceived = base.Columns["ForClosedDocReceived"];
                this.columnIsMember = base.Columns["IsMember"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnCreatedDate = base.Columns["CreatedDate"];
                this.columnUpdatedBy = base.Columns["UpdatedBy"];
                this.columnUpdatedDate = base.Columns["UpdatedDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnWRNO = new global::System.Data.DataColumn("WRNO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWRNO);
                this.columnGRNNO = new global::System.Data.DataColumn("GRNNO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRNNO);
                this.columnMCID = new global::System.Data.DataColumn("MCID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCID);
                this.columnCommodityGradeId = new global::System.Data.DataColumn("CommodityGradeId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommodityGradeId);
                this.columnBankBranchId = new global::System.Data.DataColumn("BankBranchId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankBranchId);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnExpDate = new global::System.Data.DataColumn("ExpDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpDate);
                this.columnNID = new global::System.Data.DataColumn("NID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNID);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnForClosedDocReceived = new global::System.Data.DataColumn("ForClosedDocReceived", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForClosedDocReceived);
                this.columnIsMember = new global::System.Data.DataColumn("IsMember", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMember);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnCreatedDate = new global::System.Data.DataColumn("CreatedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDate);
                this.columnUpdatedBy = new global::System.Data.DataColumn("UpdatedBy", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedBy);
                this.columnUpdatedDate = new global::System.Data.DataColumn("UpdatedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdatedDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnWRNO.AllowDBNull = false;
                this.columnGRNNO.AllowDBNull = false;
                this.columnMCID.AllowDBNull = false;
                this.columnCommodityGradeId.AllowDBNull = false;
                this.columnBankBranchId.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnExpDate.AllowDBNull = false;
                this.columnNID.AllowDBNull = false;
                this.columnNID.MaxLength = 50;
                this.columnStatus.AllowDBNull = false;
                this.columnForClosedDocReceived.AllowDBNull = false;
                this.columnIsMember.AllowDBNull = false;
                this.columnCreatedBy.AllowDBNull = false;
                this.columnCreatedDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRow NewPledgeRequestRow() {
                return ((PledgeRequestRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PledgeRequestRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PledgeRequestRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PledgeRequestRowChanged != null)) {
                    this.PledgeRequestRowChanged(this, new PledgeRequestRowChangeEvent(((PledgeRequestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PledgeRequestRowChanging != null)) {
                    this.PledgeRequestRowChanging(this, new PledgeRequestRowChangeEvent(((PledgeRequestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PledgeRequestRowDeleted != null)) {
                    this.PledgeRequestRowDeleted(this, new PledgeRequestRowChangeEvent(((PledgeRequestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PledgeRequestRowDeleting != null)) {
                    this.PledgeRequestRowDeleting(this, new PledgeRequestRowChangeEvent(((PledgeRequestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePledgeRequestRow(PledgeRequestRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PR ds = new PR();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PledgeRequestDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RejectionReasonsDataTable : global::System.Data.TypedTableBase<RejectionReasonsRow> {
            
            private global::System.Data.DataColumn columnRejectionReasonCode;
            
            private global::System.Data.DataColumn columnRejectionReason;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectionReasonsDataTable() {
                this.TableName = "RejectionReasons";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RejectionReasonsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RejectionReasonsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RejectionReasonCodeColumn {
                get {
                    return this.columnRejectionReasonCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RejectionReasonColumn {
                get {
                    return this.columnRejectionReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectionReasonsRow this[int index] {
                get {
                    return ((RejectionReasonsRow)(this.Rows[index]));
                }
            }
            
            public event RejectionReasonsRowChangeEventHandler RejectionReasonsRowChanging;
            
            public event RejectionReasonsRowChangeEventHandler RejectionReasonsRowChanged;
            
            public event RejectionReasonsRowChangeEventHandler RejectionReasonsRowDeleting;
            
            public event RejectionReasonsRowChangeEventHandler RejectionReasonsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRejectionReasonsRow(RejectionReasonsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectionReasonsRow AddRejectionReasonsRow(string RejectionReason) {
                RejectionReasonsRow rowRejectionReasonsRow = ((RejectionReasonsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RejectionReason};
                rowRejectionReasonsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRejectionReasonsRow);
                return rowRejectionReasonsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectionReasonsRow FindByRejectionReasonCode(int RejectionReasonCode) {
                return ((RejectionReasonsRow)(this.Rows.Find(new object[] {
                            RejectionReasonCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RejectionReasonsDataTable cln = ((RejectionReasonsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RejectionReasonsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRejectionReasonCode = base.Columns["RejectionReasonCode"];
                this.columnRejectionReason = base.Columns["RejectionReason"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRejectionReasonCode = new global::System.Data.DataColumn("RejectionReasonCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRejectionReasonCode);
                this.columnRejectionReason = new global::System.Data.DataColumn("RejectionReason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRejectionReason);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRejectionReasonCode}, true));
                this.columnRejectionReasonCode.AutoIncrement = true;
                this.columnRejectionReasonCode.AutoIncrementSeed = -1;
                this.columnRejectionReasonCode.AutoIncrementStep = -1;
                this.columnRejectionReasonCode.AllowDBNull = false;
                this.columnRejectionReasonCode.ReadOnly = true;
                this.columnRejectionReasonCode.Unique = true;
                this.columnRejectionReason.AllowDBNull = false;
                this.columnRejectionReason.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectionReasonsRow NewRejectionReasonsRow() {
                return ((RejectionReasonsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RejectionReasonsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RejectionReasonsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RejectionReasonsRowChanged != null)) {
                    this.RejectionReasonsRowChanged(this, new RejectionReasonsRowChangeEvent(((RejectionReasonsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RejectionReasonsRowChanging != null)) {
                    this.RejectionReasonsRowChanging(this, new RejectionReasonsRowChangeEvent(((RejectionReasonsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RejectionReasonsRowDeleted != null)) {
                    this.RejectionReasonsRowDeleted(this, new RejectionReasonsRowChangeEvent(((RejectionReasonsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RejectionReasonsRowDeleting != null)) {
                    this.RejectionReasonsRowDeleting(this, new RejectionReasonsRowChangeEvent(((RejectionReasonsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRejectionReasonsRow(RejectionReasonsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PR ds = new PR();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RejectionReasonsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PledgeRequestRejectedDataTable : global::System.Data.TypedTableBase<PledgeRequestRejectedRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnPledgeRequestId;
            
            private global::System.Data.DataColumn columnRejectionReasonCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRejectedDataTable() {
                this.TableName = "PledgeRequestRejected";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PledgeRequestRejectedDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PledgeRequestRejectedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PledgeRequestIdColumn {
                get {
                    return this.columnPledgeRequestId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RejectionReasonCodeColumn {
                get {
                    return this.columnRejectionReasonCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRejectedRow this[int index] {
                get {
                    return ((PledgeRequestRejectedRow)(this.Rows[index]));
                }
            }
            
            public event PledgeRequestRejectedRowChangeEventHandler PledgeRequestRejectedRowChanging;
            
            public event PledgeRequestRejectedRowChangeEventHandler PledgeRequestRejectedRowChanged;
            
            public event PledgeRequestRejectedRowChangeEventHandler PledgeRequestRejectedRowDeleting;
            
            public event PledgeRequestRejectedRowChangeEventHandler PledgeRequestRejectedRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPledgeRequestRejectedRow(PledgeRequestRejectedRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRejectedRow AddPledgeRequestRejectedRow(System.Guid Id, System.Guid PledgeRequestId, int RejectionReasonCode) {
                PledgeRequestRejectedRow rowPledgeRequestRejectedRow = ((PledgeRequestRejectedRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        PledgeRequestId,
                        RejectionReasonCode};
                rowPledgeRequestRejectedRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPledgeRequestRejectedRow);
                return rowPledgeRequestRejectedRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRejectedRow FindById(System.Guid Id) {
                return ((PledgeRequestRejectedRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PledgeRequestRejectedDataTable cln = ((PledgeRequestRejectedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PledgeRequestRejectedDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnPledgeRequestId = base.Columns["PledgeRequestId"];
                this.columnRejectionReasonCode = base.Columns["RejectionReasonCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnPledgeRequestId = new global::System.Data.DataColumn("PledgeRequestId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPledgeRequestId);
                this.columnRejectionReasonCode = new global::System.Data.DataColumn("RejectionReasonCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRejectionReasonCode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnPledgeRequestId.AllowDBNull = false;
                this.columnRejectionReasonCode.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRejectedRow NewPledgeRequestRejectedRow() {
                return ((PledgeRequestRejectedRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PledgeRequestRejectedRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PledgeRequestRejectedRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PledgeRequestRejectedRowChanged != null)) {
                    this.PledgeRequestRejectedRowChanged(this, new PledgeRequestRejectedRowChangeEvent(((PledgeRequestRejectedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PledgeRequestRejectedRowChanging != null)) {
                    this.PledgeRequestRejectedRowChanging(this, new PledgeRequestRejectedRowChangeEvent(((PledgeRequestRejectedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PledgeRequestRejectedRowDeleted != null)) {
                    this.PledgeRequestRejectedRowDeleted(this, new PledgeRequestRejectedRowChangeEvent(((PledgeRequestRejectedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PledgeRequestRejectedRowDeleting != null)) {
                    this.PledgeRequestRejectedRowDeleting(this, new PledgeRequestRejectedRowChangeEvent(((PledgeRequestRejectedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePledgeRequestRejectedRow(PledgeRequestRejectedRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PR ds = new PR();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PledgeRequestRejectedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PledgeRequestRow : global::System.Data.DataRow {
            
            private PledgeRequestDataTable tablePledgeRequest;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PledgeRequestRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePledgeRequest = ((PledgeRequestDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid Id {
                get {
                    return ((global::System.Guid)(this[this.tablePledgeRequest.IdColumn]));
                }
                set {
                    this[this.tablePledgeRequest.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WRNO {
                get {
                    return ((int)(this[this.tablePledgeRequest.WRNOColumn]));
                }
                set {
                    this[this.tablePledgeRequest.WRNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GRNNO {
                get {
                    return ((int)(this[this.tablePledgeRequest.GRNNOColumn]));
                }
                set {
                    this[this.tablePledgeRequest.GRNNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid MCID {
                get {
                    return ((global::System.Guid)(this[this.tablePledgeRequest.MCIDColumn]));
                }
                set {
                    this[this.tablePledgeRequest.MCIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid CommodityGradeId {
                get {
                    return ((global::System.Guid)(this[this.tablePledgeRequest.CommodityGradeIdColumn]));
                }
                set {
                    this[this.tablePledgeRequest.CommodityGradeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid BankBranchId {
                get {
                    return ((global::System.Guid)(this[this.tablePledgeRequest.BankBranchIdColumn]));
                }
                set {
                    this[this.tablePledgeRequest.BankBranchIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Quantity {
                get {
                    return ((int)(this[this.tablePledgeRequest.QuantityColumn]));
                }
                set {
                    this[this.tablePledgeRequest.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ExpDate {
                get {
                    return ((global::System.DateTime)(this[this.tablePledgeRequest.ExpDateColumn]));
                }
                set {
                    this[this.tablePledgeRequest.ExpDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NID {
                get {
                    return ((string)(this[this.tablePledgeRequest.NIDColumn]));
                }
                set {
                    this[this.tablePledgeRequest.NIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Status {
                get {
                    return ((int)(this[this.tablePledgeRequest.StatusColumn]));
                }
                set {
                    this[this.tablePledgeRequest.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ForClosedDocReceived {
                get {
                    return ((bool)(this[this.tablePledgeRequest.ForClosedDocReceivedColumn]));
                }
                set {
                    this[this.tablePledgeRequest.ForClosedDocReceivedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMember {
                get {
                    return ((bool)(this[this.tablePledgeRequest.IsMemberColumn]));
                }
                set {
                    this[this.tablePledgeRequest.IsMemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid CreatedBy {
                get {
                    return ((global::System.Guid)(this[this.tablePledgeRequest.CreatedByColumn]));
                }
                set {
                    this[this.tablePledgeRequest.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDate {
                get {
                    return ((global::System.DateTime)(this[this.tablePledgeRequest.CreatedDateColumn]));
                }
                set {
                    this[this.tablePledgeRequest.CreatedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid UpdatedBy {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tablePledgeRequest.UpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedBy\' in table \'PledgeRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePledgeRequest.UpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdatedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePledgeRequest.UpdatedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdatedDate\' in table \'PledgeRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePledgeRequest.UpdatedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedByNull() {
                return this.IsNull(this.tablePledgeRequest.UpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedByNull() {
                this[this.tablePledgeRequest.UpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdatedDateNull() {
                return this.IsNull(this.tablePledgeRequest.UpdatedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdatedDateNull() {
                this[this.tablePledgeRequest.UpdatedDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RejectionReasonsRow : global::System.Data.DataRow {
            
            private RejectionReasonsDataTable tableRejectionReasons;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RejectionReasonsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRejectionReasons = ((RejectionReasonsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RejectionReasonCode {
                get {
                    return ((int)(this[this.tableRejectionReasons.RejectionReasonCodeColumn]));
                }
                set {
                    this[this.tableRejectionReasons.RejectionReasonCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RejectionReason {
                get {
                    return ((string)(this[this.tableRejectionReasons.RejectionReasonColumn]));
                }
                set {
                    this[this.tableRejectionReasons.RejectionReasonColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PledgeRequestRejectedRow : global::System.Data.DataRow {
            
            private PledgeRequestRejectedDataTable tablePledgeRequestRejected;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PledgeRequestRejectedRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePledgeRequestRejected = ((PledgeRequestRejectedDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid Id {
                get {
                    return ((global::System.Guid)(this[this.tablePledgeRequestRejected.IdColumn]));
                }
                set {
                    this[this.tablePledgeRequestRejected.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid PledgeRequestId {
                get {
                    return ((global::System.Guid)(this[this.tablePledgeRequestRejected.PledgeRequestIdColumn]));
                }
                set {
                    this[this.tablePledgeRequestRejected.PledgeRequestIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RejectionReasonCode {
                get {
                    return ((int)(this[this.tablePledgeRequestRejected.RejectionReasonCodeColumn]));
                }
                set {
                    this[this.tablePledgeRequestRejected.RejectionReasonCodeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PledgeRequestRowChangeEvent : global::System.EventArgs {
            
            private PledgeRequestRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRowChangeEvent(PledgeRequestRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RejectionReasonsRowChangeEvent : global::System.EventArgs {
            
            private RejectionReasonsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectionReasonsRowChangeEvent(RejectionReasonsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectionReasonsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PledgeRequestRejectedRowChangeEvent : global::System.EventArgs {
            
            private PledgeRequestRejectedRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRejectedRowChangeEvent(PledgeRequestRejectedRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PledgeRequestRejectedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591